#!/bin/sh -e

##########################################################################
#   Synopsis:
#       auto-script2man script-filename
#       
#   Description:
#       auto-script2man generates a man page from an embedded comment
#       in the script.
#       Within the script file there must be a block
#       comment containining all the sections of the man page.  Each
#       of the following must be present on a separate line within the
#       block comment:
#       
#       # Synopsis:
#
#           Followed by a script invocation template typical of
#           the usage message of a Unix command or the synopsis in a
#           typical man page.
#
#       # Description:
#
#       Followed by multiple lines of text describing the purpose of the
#       script and how to use it.
#
#       # Arguments:
#
#       Followed by one line describing each command-line argument
#
#       # Returns:
#
#       Exit status returned by the script
#
#       # Examples:
#       
#       Sufficient examples of running the script to cover typical use cases
#
#       # See also:
#       
#       List of related scripts and commands, e.g. auto-c2man(1)
#       
#   Arguments:
#       script-filename     File containint the script
#       
#   Returns:
#       0 on success, non-zero error codes otherwise
#
#   Examples:
#       auto-script2man script.sh
#
#   See also:
#       auto-c2man(1), auto-gen-get-set(1)
#
#   History:
#   Date        Name        Modification
#   2021-04-23  Jason Bacon Begin
##########################################################################

usage()
{
    printf "Usage: $0 source-file\n"
    exit 1
}


##########################################################################
#   Function description:
#       Pause until user presses return
##########################################################################

pause()
{
    local junk
    
    printf "Press return to continue..."
    read junk
}


##########################################################################
#   Function description:
#       Generate a man page for the script
#       
#   History:
#   Date        Name        Modification
#   2021-04-23  Jason Bacon Begin
##########################################################################

gen_page()
{
    FILE_LIST="$FILE_LIST Temp-man/$name.1"
    cat << EOM > Temp-man/$name.1
\" Generated by script2man from $name
.TH $name 1

\" Convention:
\" Underline anything that is typed verbatim - commands, etc.
.SH SYNOPSIS
.PP
.nf 
.na
$(cat script2man-synopsis)
.ad
.fi

.SH ARGUMENTS
.nf
.na
$(cat script2man-arguments)
.ad
.fi

.SH DESCRIPTION
$(cat script2man-description)
EOM

    if [ -e script2man-returns ]; then
	cat << EOM >> Temp-man/$name.1

.SH RETURN VALUES
$(cat script2man-returns)
EOM
    fi
    
    if [ -e script2man-examples ]; then
	cat << EOM >> Temp-man/$name.1

.SH EXAMPLES
.nf
.na
$(cat script2man-examples)
.ad
.fi
EOM
    fi
    
    if [ -e script2man-files ]; then
	cat << EOM >> Temp-man/$name.1

.SH FILES
.nf
.na
$(cat script2man-files)
.ad
.fi
EOM
    fi

    if [ -e script2man-env ]; then
	cat << EOM >> Temp-man/$name.1

.SH ENVIRONMENT
$(cat script2man-env)
EOM
    fi
    
    if [ -e script2man-see-also ]; then
	cat << EOM >> Temp-man/$name.1

.SH SEE ALSO
$(cat script2man-see-also)

EOM
    fi
    return
}


##########################################################################
#   Main
##########################################################################

if [ $# -lt 1 ]; then
    usage
fi

mkdir -p Temp-man
rm -f script2man-*
for source_file in "$@"; do
    printf "Parsing $source_file...\n"
    name=$(basename $source_file)
    
    mode=ignore
    main_comment=n
    my_tty=$(tty)
    
    while read line && [ $mode != done ]; do
	# A Synopsis: line is required          
	if printf "%s\n" "$line" | grep -q '^[ ]*\#[ ]*Synopsis:'; then
	    mode=synopsis
	    have_name=no
	    line=''
	    main_comment=y
	elif printf "%s\n" "$line" | grep -q '^[ ]*\#[ ]*Description:'; then
	    mode=description
	    line=''
	elif printf "%s\n" "$line" | grep -q '^[ ]*\#[ ]*Arguments:'; then
	    mode=arguments
	    line=''
	elif printf "%s\n" "$line" | grep -q '^[ ]*\#[ ]*Returns'; then
	    mode=returns
	    line=''
	elif printf "%s\n" "$line" | grep -q '^[ ]*\#[ ]*Examples:'; then
	    mode=examples
	    line=''
	    line_count=0
	elif printf "%s\n" "$line" | grep -q '^[ ]*\#[ ]*Files:'; then
	    mode=files
	    line=''
	elif printf "%s\n" "$line" | grep -q '^[ ]*\#[ ]*Environment:'; then
	    mode=env
	    line=''
	elif printf "%s\n" "$line" | grep -q '^[ ]*\#[ ]*See also:'; then
	    mode=see-also
	    line=''
	elif printf "%s\n" "$line" | grep -q '^[ ]*\#[ ]*History'; then
	    mode=ignore
	    line=''
	elif printf "%s\n" "$line" | grep -q '^####' && [ $main_comment = y ]; then
	    mode=done
	    gen_page
	    main_comment=n
	    rm script2man-*
	fi
    
	case $mode in
	synopsis)
	    if [ ! -z "$line" ]; then
		line=$(printf "%s\n" "$line" | sed -e 's|^ *# *||')
		printf "%s\n" "$line" >> script2man-synopsis
	    fi
	    ;;
	    
	description)
	    line=$(printf "%s\n" "$line" | sed -e 's|^ *# *||')
	    printf "%s\n" "$line" >> script2man-description
	    ;;
	    
	arguments)
	    line=$(printf "%s\n" "$line" | sed -e 's|^ *# *||')
	    if [ ! -z "$line" ]; then
		printf "%s\n" "$line" >> script2man-arguments
	    fi
	    ;;
	    
	returns)
	    line=$(printf "%s\n" "$line" | sed -e 's|^ *# *||')
	    printf "%s\n" "$line" >> script2man-returns
	    ;;
	    
	examples)
	    # First line is not real, just from line=''
	    # Respect blanks after that
	    if [ $line_count -gt 0 ]; then
		line=$(printf "%s\n" "$line" | sed -e 's|^ *#       ||')
		line=$(printf "%s\n" "$line" | sed -e 's|^ *# *$||')
		printf "%s\n" "$line" >> script2man-examples
	    fi
	    line_count=$(($line_count + 1))
	    ;;
	    
	files)
	    if [ ! -z "$line" ]; then
		line=$(printf "%s\n" "$line" | sed -e 's|^ *# *||')
		printf "%s\n" "$line" >> script2man-files
	    fi
	    ;;
	    
	env)
	    line=$(printf "%s\n" "$line" | sed -e 's|^ *# *||')
	    printf "%s\n" "$line" >> script2man-env
	    ;;
	    
	see-also)
	    line=$(printf "%s\n" "$line" | sed -e 's|^ *# *||')
	    printf "%s\n" "$line" >> script2man-see-also
	    ;;
	    
	history)
	    ;;
	    
	*)
	    ;;
	    
	esac
    done < $source_file
done

ape $FILE_LIST

