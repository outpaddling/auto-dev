#!/bin/sh -e

##########################################################################
#   Synopsis:
#       auto-gen-get-set file.h lib-flags return-value-prefix [header-subdir]
#
#   Description:
#       auto-gen-get-set generates get (accessor) and set (mutator) macros
#       and set (mutator) functions for the first structure in the header file
#       file.h.
#
#       Each header should define exactly one class structure, following
#       object-oriented design standards.
#
#       lib-flags (e.g. -lbiolibc) indicate the require library for the class
#       and are included in the synopsis.
#
#       The header must define constants ${PREFIX}DATA_OK and
#       ${PREFIX}DATA_OUT_OF_RANGE, where PREFIX is taken from the
#       third command-line argument.
#
#       If header files are installed in a subdirectory under
#       PREFIX/include, then it must be specified as the fourth argument.
#       
#   Arguments:
#       file.h              Header file containing the structure def
#       lib-flags           -l flags required for linking with the library
#       return-value-prefix Prefix on constants returned by mutator functions
#       header-subdir       Optional subdirectory under PREFIX/include
#       
#   Returns:
#       0 on success, non-zero error codes otherwise
#
#   Examples:
#       auto-gen-get-set bed.h '-lbiolibc -lxtend' BL_ biolibc/
#
#   See also:
#       auto-c2man(1), auto-script2man(1)
#       
#   History:
#   Date        Name        Modification
#   2021-07-16  Jason Bacon Begin
##########################################################################

usage()
{
    printf "Usage: $0 file.h lib-flags return-value-prefix [header-subdir/]\n"
    printf "Example: $0 bed.h '-lbiolibc -lxtend' BL_ biolibc/\n"
    exit 1
}


##########################################################################
#   Function description:
#       Generate man page for an accessor macro
#       
#   History:
#   Date        Name        Modification
#   2021-07-21  Jason Bacon Begin
##########################################################################

accessor_man()
{
    local structure_type="$1"
    local member_type="$2"
    local member_name="$3"
    local obj="$4"
    local macro="$5"
    
    local call="$macro(ptr)"
    local macro_man="Temp-man/$macro.3"
    
    cat << EOM > $macro_man
\" Generated by $0
.TH $macro 3

.SH LIBRARY
.nf
.na
#include <$HEADER_SUBDIR$HEADER>
$LIB_FLAGS
.ad
.fi

\" Convention:
\" Underline anything that is typed verbatim - commands, etc.
.SH SYNOPSIS
.PP
.nf 
.na
$call
.ad
.fi

.SH ARGUMENTS
.nf
.na
EOM

printf "%-15s %s\n" ptr "Pointer to a $structure_type structure" >> $macro_man

    cat << EOM >> $macro_man
.ad
.fi

.SH DESCRIPTION

Accessor macro for $member_name.  Use this macro to reference $member_name in
a $structure_type structure from functions that are not members of the class.
This allows separation of implementation from interface.  While the
implementation of the $structure_type structure may change, effort is made to
preserve the API of functions and macros used to access it.

.SH EXAMPLES

.nf
.na
EOM

printf "%-15s %s;\n" "$structure_type" "$obj" >> $macro_man
printf "%-15s %s;\n" "$member_type" "$member_name" >> $macro_man

    cat << EOM >> $macro_man

$member_name = $macro(&$obj);
.ad
.fi

.SH SEE ALSO

See $HEADER_SUBDIR$HEADER for a full list of macros.
EOM
}


##########################################################################
#   Function description:
#       Generate man page for an array element accessor macro
#       
#   History:
#   Date        Name        Modification
#   2021-07-21  Jason Bacon Begin
##########################################################################

accessor_man_ae()
{
    local structure_type="$1"
    local member_type="$2"
    local member_name="$3"
    local obj="$4"
    local macro="$5"_AE
    local array_size=$6
    
    local call="$macro(ptr, c)"
    local macro_man="Temp-man/$macro.3"
    
    cat << EOM > $macro_man
\" Generated by $0
.TH $macro 3

.SH LIBRARY
.nf
.na
#include <$HEADER_SUBDIR$HEADER>
$LIB_FLAGS
.ad
.fi

\" Convention:
\" Underline anything that is typed verbatim - commands, etc.
.SH SYNOPSIS
.PP
.nf 
.na
$call
.ad
.fi

.SH ARGUMENTS
.nf
.na
EOM

printf "%-15s %s\n" ptr "Pointer to a $structure_type structure" >> $macro_man
printf "%-15s %s\n" c "Subscript to the $member_name array" >> $macro_man

    cat << EOM >> $macro_man
.ad
.fi

.SH DESCRIPTION

Accessor macro for $member_name array elements.  Use this macro to reference
an element of $member_name in a $structure_type structure from functions
that are not members of the class.
This allows separation of implementation from interface.  While the
implementation of the $structure_type structure may change, effort is made to
preserve the API of functions and macros used to access it.

.SH EXAMPLES

.nf
.na
EOM

printf "%-15s %s;\n" "$structure_type" "$obj" >> $macro_man
printf "%-15s c;\n" "size_t" >> $macro_man
printf "%-15s element;\n" "$member_type" >> $macro_man

    cat << EOM >> $macro_man

element = $macro(&$obj,c);
.ad
.fi

.SH SEE ALSO

See $HEADER_SUBDIR$HEADER for a full list of macros.
EOM
}


##########################################################################
#   Function description:
#       Generate an accessor macro and man page
#       
#   History:
#   Date        Name        Modification
#   2021-07-16  Jason Bacon Begin
##########################################################################

accessor_macros()
{
    local structure_type=$1
    local member=$2
    local member_type=$(echo $member | cut -d : -f 1)
    local member_name=$(echo $member | cut -d : -f 2)
    
    local obj=${structure_type%_t}
    local uc_type=$(echo $structure_type | tr '[:lower:]' '[:upper:]')
    local uc_obj=${uc_type%_T}
    local uc_member_name=$(echo $member_name | tr '[:lower:]' '[:upper:]')
    local macro=${uc_obj}_$uc_member_name
    
    if echo $member | fgrep -q ':array:'; then
	array=true
    else
	array=false
    fi
    if echo $member_type | fgrep -q '*'; then
	local pointer=true
    else
	local pointer=false
    fi

    # Scalar mutator
    printf "%-39s %s\n" "#define $macro(ptr)" "((ptr)->$member_name)"
    accessor_man $structure_type $member_type $member_name $obj $macro

    # Array element mutator
    if [ $array = true ] || [ $pointer = true ]; then
	array_size="${member##*:}"
	printf "%-39s %s\n" "#define ${macro}_AE(ptr,c)" \
		"((ptr)->$member_name[c])"
	accessor_man_ae $structure_type $member_type $member_name $obj \
	    ${macro} $array_size
    fi
}


##########################################################################
#   Function description:
#       Generate a mutator macro man page
#       
#   History:
#   Date        Name        Modification
#   2021-07-21  Jason Bacon Begin
##########################################################################

mutator_man()
{
    local structure_type="$1"
    local member_type="$2"
    local member_name="$3"
    local obj="$4"
    local macro="$5"
    
    local macro_man="Temp-man/$macro.3"
    local call="$macro(ptr, new_$member_name)"
    local example="$macro(&$obj, new_$member_name)"
    local function=$(echo $macro | tr '[:upper:]' '[:lower:]')
    
    # Macro man page
    local macro_man=Temp-man/$macro.3
    cat << EOM > $macro_man
\" Generated by $0
.TH $macro 3

.SH LIBRARY
.nf
.na
#include <$HEADER_SUBDIR$HEADER>
$LIB_FLAGS
.ad
.fi

\" Convention:
\" Underline anything that is typed verbatim - commands, etc.
.SH SYNOPSIS
.PP
.nf 
.na
$call
.ad
.fi

.SH ARGUMENTS
.nf
.na
EOM

printf "%-15s %s\n" ptr "Pointer to a $structure_type structure" >> Temp-man/$macro.3
printf "%-15s %s\n" new_$member_name "New value for $member_name" >> Temp-man/$macro.3

    cat << EOM >> $macro_man
.ad
.fi

.SH DESCRIPTION

Mutator macro for $member_name.  Use this macro to set $member_name in
a $structure_type structure from functions that are not members of the class.
This allows separation of implementation from interface.  While the
implementation of the $structure_type structure may change, effort is made to
preserve the API of functions and macros used to access it.

Note that there is an equivalent function $function(), which performs
this function with data verification.  Use the function version for more
robust code with a slight performance penalty if the value of
new_$member_name is not validated by other means.

.SH EXAMPLES

.nf
.na
EOM

if echo $macro | fgrep -q _CPY; then
    local brackets='[]'
else
    local brackets=''
fi
printf "%-15s %s;\n" "$structure_type" "$obj" >> $macro_man
printf "%-15s %s;\n" "$member_type" "new_$member_name$brackets" >> $macro_man

    cat << EOM >> $macro_man

$example;
.ad
.fi

.SH SEE ALSO

.nf
.na
$function(3)
See $HEADER_SUBDIR$HEADER for a full list of macros.
.ad
.fi
EOM
    return 0
}


##########################################################################
#   Function description:
#       Generate an array element mutator macro man page
#       
#   History:
#   Date        Name        Modification
#   2021-07-21  Jason Bacon Begin
##########################################################################

mutator_man_ae()
{
    local structure_type="$1"
    local member_type="$2"
    local member_name="$3"
    local obj="$4"
    local macro="$5"_AE
    
    local call="$macro(ptr)"
    local macro_man="Temp-man/$macro.3"
    local call="$macro(ptr, c, new_${member_name}_element)"
    local example="$macro(&$obj, c, new_${member_name}_element)"
    local function=$(echo $macro | tr '[:upper:]' '[:lower:]')
    
    # Macro man page
    local macro_man=Temp-man/$macro.3
    cat << EOM > $macro_man
\" Generated by $0
.TH $macro 3

.SH LIBRARY
.nf
.na
#include <$HEADER_SUBDIR$HEADER>
$LIB_FLAGS
.ad
.fi

\" Convention:
\" Underline anything that is typed verbatim - commands, etc.
.SH SYNOPSIS
.PP
.nf 
.na
$call
.ad
.fi

.SH ARGUMENTS
.nf
.na
EOM

    printf "%-23s %s\n" ptr "Pointer to a $structure_type structure" >> $macro_man
    printf "%-23s Subscript to $member_name array\n" "c" >> $macro_man
    printf "%-23s %s\n" new_${member_name}_element "New value for $member_name[c]" >> $macro_man

    cat << EOM >> $macro_man
.ad
.fi

.SH DESCRIPTION

Mutator macro for $member_name array elements.  Use this macro to set
an element of $member_name in a $structure_type structure from functions
that are not members of the class.
This allows separation of implementation from interface.  While the
implementation of the $structure_type structure may change, effort is made to
preserve the API of functions and macros used to access it.

Note that there is an equivalent function $function(), which performs
this function with data verification.  Use the function version for more
robust code with a slight performance penalty if the value of
new_${member_name}_element is not validated by other means.

.SH EXAMPLES

.nf
.na
EOM

printf "%-15s %s;\n" "$structure_type" "$obj" >> $macro_man
printf "%-15s c;\n" "size_t" >> $macro_man
printf "%-15s %s;\n" "$member_type" "new_${member_name}_element" >> $macro_man

    cat << EOM >> $macro_man

$example;
.ad
.fi

.SH SEE ALSO

.nf
.na
$function(3)
See $HEADER_SUBDIR$HEADER for a full list of macros.
.ad
.fi
EOM
    return 0
}


##########################################################################
#   Function description:
#       Generate a C mutator function for direct assignment
#       
#   History:
#   Date        Name        Modification
#   2021-07-21  Jason Bacon Begin
##########################################################################

mutator_function_scalar()
{
    local structure_type="$1"
    local member_type="$2"
    local member_name="$3"
    local obj="$4"
    local macro="$5"
    
    local call="$function(ptr)"
    local function_man="Temp-man/$function.3"
    local call="$function(ptr, c, new_${member_name}_element)"
    local example="$function(&$obj, c, new_${member_name}_element)"
    local macro=$(echo $function | tr '[:lower:]' '[:upper:]')
    
    if [ $array = true ]; then
	brackets="[]"
    else
	brackets=''
    fi
    
    if echo $member_type | fgrep -q '*'; then
	sanity="new_$member_name == NULL"
    else
	sanity='0'
    fi
    
    cat << EOM >> $C_CODE


/***************************************************************************
 *  Library:
 *      #include <$HEADER_SUBDIR$HEADER>
 *      $LIB_FLAGS
 *
 *  Description:
 *      Mutator for $member_name member in a $structure_type structure.
 *      Use this function to set $member_name in a $structure_type variable
 *      from non-member functions.  This function performs a direct
 *      assignment for scalar or pointer structure members.  If
 *      $member_name is a pointer, data previously pointed to should
 *      generally be freed before calling this function to avoid memory
 *      leaks.
 *
 *      Note that there is an equivalent macro $macro(), which performs
 *      this function with no data verification or function call overhead.
 *      Use the macro version to maximize performance where the validity
 *      of new_$member_name is guaranteed by other means.
 *      
 *
 *  Arguments:
EOM

printf " *      %-15s %s\n" ${obj}_ptr "Pointer to the structure to set" >> $C_CODE
printf " *      %-15s %s\n" new_$member_name "The new value for $member_name" >> $C_CODE

    cat << EOM >> $C_CODE
 *
 *  Returns:
 *      ${RV_PREFIX}DATA_OK if the new value is acceptable and assigned
 *      ${RV_PREFIX}DATA_OUT_OF_RANGE otherwise
 *
 *  Examples:
EOM

    printf " *      %-15s %s;\n" $structure_type $obj >> $C_CODE
    printf " *      %-15s %s;\n" $member_type new_$member_name >> $C_CODE

    cat << EOM >> $C_CODE
 *
 *      if ( ${obj}_set_$member_name(&$obj, new_$member_name) == ${RV_PREFIX}DATA_OK )
 *      {
 *      }
 *
 *  See also:
 *      $macro(3)
 *
 *  History: 
 *  Date        Name        Modification
 *  $(date +%Y-%m-%d)  gen-get-set Auto-generated from $HEADER
 ***************************************************************************/

int     ${obj}_set_$member_name($structure_type *${obj}_ptr, $member_type new_$member_name$brackets)

{
    /* FIXME: Replace this with a proper sanity check */
    if ( $sanity )
	return ${RV_PREFIX}DATA_OUT_OF_RANGE;
    else
    {
	${obj}_ptr->$member_name = new_$member_name;
	return ${RV_PREFIX}DATA_OK;
    }
}
EOM
}


##########################################################################
#   Function description:
#       Generate a C mutator function for copying to an array
#       
#   History:
#   Date        Name        Modification
#   2021-07-21  Jason Bacon Begin
##########################################################################

mutator_function_cpy()
{
    local structure_type="$1"
    local member_type="$2"
    local member_name="$3"
    local obj="$4"
    local function="$5"
    
    local call="$function(ptr)"
    local function_man="Temp-man/$function.3"
    local call="$function(ptr, c, new_${member_name}_element)"
    local example="$function(&$obj, c, new_${member_name}_element)"
    local macro=$(echo $function | tr '[:lower:]' '[:upper:]')
    
    if [ $array = true ]; then
	brackets="[]"
    else
	brackets=''
    fi
    
    cat << EOM >> $C_CODE


/***************************************************************************
 *  Library:
 *      #include <$HEADER_SUBDIR$HEADER>
 *      $LIB_FLAGS
 *
 *  Description:
 *      Mutator for $member_name member in a $structure_type structure.
 *      Use this function to set $member_name in a $structure_type variable
 *      from non-member functions.  This function copies the array pointed to
 *      by new_$member_name to $obj_ptr->$member_name.
 *
 *      Note that there is an equivalent macro $macro(), which performs
 *      this function with no data verification or function call overhead.
 *      Use the macro version to maximize performance where the validity
 *      of new_$member_name is guaranteed by other means.
 *
 *  Arguments:
EOM

printf " *      %-15s %s\n" ${obj}_ptr "Pointer to the structure to set" >> $C_CODE
printf " *      %-15s %s\n" new_$member_name "The new value for $member_name" >> $C_CODE
printf " *      %-15s %s\n" "array_size" "Size of the $member_name array." >> $C_CODE

    cat << EOM >> $C_CODE
 *
 *  Returns:
 *      ${RV_PREFIX}DATA_OK if the new value is acceptable and assigned
 *      ${RV_PREFIX}DATA_OUT_OF_RANGE otherwise
 *
 *  Examples:
EOM

    printf " *      %-15s %s;\n" $structure_type $obj >> $C_CODE
    printf " *      %-15s %s;\n" $member_type new_$member_name >> $C_CODE
    printf " *      %-15s %s;\n" size_t array_size >> $C_CODE

    cat << EOM >> $C_CODE
 *
 *      if ( ${obj}_set_$member_name(&$obj, new_$member_name, array_size) == ${RV_PREFIX}DATA_OK )
 *      {
 *      }
 *
 *  See also:
 *      $macro(3)
 *
 *  History: 
 *  Date        Name        Modification
 *  $(date +%Y-%m-%d)  gen-get-set Auto-generated from $HEADER
 ***************************************************************************/

int     ${obj}_set_${member_name}_cpy($structure_type *${obj}_ptr, $member_type new_$member_name$brackets, size_t array_size)

{
    /* FIXME: Replace this with a proper sanity check */
    if ( new_$member_name == NULL )
	return ${RV_PREFIX}DATA_OUT_OF_RANGE;
    else
    {
EOM
    if [ "$member_type" = 'char *' ] || [ "$member_type" = char ]; then
	cat << EOM >> $C_CODE
	// FIXME: Assuming char array is a null-terminated string
	strlcpy(${obj}_ptr->$member_name, new_$member_name, array_size);
EOM
    else
	cat << EOM >> $C_CODE
	{
	    size_t  c;
	    
	    // FIXME: Assuming all elements should be copied
	    for (c = 0; c < array_size; ++c)
		${obj}_ptr->$member_name[c] = new_$member_name[c];
	}
EOM
    fi
    cat << EOM >> $C_CODE
	return ${RV_PREFIX}DATA_OK;
    }
}
EOM

}


##########################################################################
#   Function description:
#       Generate a C mutator function for an array element
#       
#   History:
#   Date        Name        Modification
#   2021-07-21  Jason Bacon Begin
##########################################################################

mutator_function_ae()
{
    local structure_type="$1"
    local member_type="$2"
    local member_name="$3"
    local obj="$4"
    local function="$5"_ae
    
    local call="$function(ptr)"
    local function_man="Temp-man/$function.3"
    local call="$function(ptr, c, new_${member_name}_element)"
    local example="$function(&$obj, c, new_${member_name}_element)"
    # member_type minus one *
    local member_type_deref=$(echo $member_type | sed -e 's|\*$||g')
    local macro=$(echo $function | tr '[:lower:]' '[:upper:]')
    
    if [ $array = true ]; then
	brackets="[$array_size]"
    else
	brackets=''
    fi
    
    if [ "$member_type_deref" = char ]; then
	sanity="!isprint(new_${member_name}_element) && (new_${member_name}_element != '\0')"
    elif echo "$member_type_deref" | fgrep -q '*'; then
	sanity="new_${member_name}_element == NULL"
    else
	sanity='0'
    fi
    
    cat << EOM >> $C_CODE


/***************************************************************************
 *  Library:
 *      #include <$HEADER_SUBDIR$HEADER>
 *      $LIB_FLAGS
 *
 *  Description:
 *      Mutator for an array element of $member_name member in a $structure_type
 *      structure. Use this function to set an element of the array
 *      $member_name in a $structure_type variable from non-member functions.
 *
 *      Note that there is an equivalent macro $macro(), which performs
 *      this function with no data verification or function call overhead.
 *      Use the macro version to maximize performance where the validity
 *      of new_${member_name}_element is guaranteed by other means.
 *
 *  Arguments:
EOM

printf " *      %-15s %s\n" ${obj}_ptr "Pointer to the structure to set" >> $C_CODE
printf " *      %-15s %s\n" c "Subscript to the $member_name array" >> $C_CODE
printf " *      %-15s %s\n" new_${member_name}_element "The new value for $member_name[c]" >> $C_CODE

    cat << EOM >> $C_CODE
 *
 *  Returns:
 *      ${RV_PREFIX}DATA_OK if the new value is acceptable and assigned
 *      ${RV_PREFIX}DATA_OUT_OF_RANGE otherwise
 *
 *  Examples:
EOM

    printf " *      %-15s %s;\n" $structure_type $obj >> $C_CODE
    printf " *      %-15s c;\n" "size_t" >> $C_CODE
    printf " *      %-15s %s;\n" $member_type new_${member_name}_element >> $C_CODE

    cat << EOM >> $C_CODE
 *
 *      if ( ${obj}_set_$member_name(&$obj, c, new_${member_name}_element) == ${RV_PREFIX}DATA_OK )
 *      {
 *      }
 *
 *  See also:
 *      $macro(3)
 *
 *  History: 
 *  Date        Name        Modification
 *  $(date +%Y-%m-%d)  gen-get-set Auto-generated from $HEADER
 ***************************************************************************/

int     ${obj}_set_${member_name}_ae($structure_type *${obj}_ptr, size_t c, $member_type_deref new_${member_name}_element)

{
    /* FIXME: Replace this with a proper sanity check */
    if ( $sanity )
	return ${RV_PREFIX}DATA_OUT_OF_RANGE;
    else
    {
	${obj}_ptr->$member_name[c] = new_${member_name}_element;
	return ${RV_PREFIX}DATA_OK;
    }
}
EOM

}


##########################################################################
#   Function description:
#       Generate mutator macros for arrays
#       
#   History:
#   Date        Name        Modification
#   2021-07-21  Jason Bacon Begin
##########################################################################

mutator_macros_array()
{
    local structure_type="$1"
    local member_type="$2"
    local member_name="$3"
    local obj="$4"
    local macro="$5"
    
    if [ "$member_type" = 'char *' ] || [ "$member_type" = char ]; then
	printf "// FIXME: Assuming char array is a null-terminated string\n"
	printf "%-47s %s\n" "#define ${macro}_CPY(ptr,val,array_size)" \
		"strlcpy((ptr)->$member_name,val,array_size)"
    else
	printf "// FIXME: Assuming all elements should be copied\n"
	printf "%-47s \\\\\n    %s\n" "#define ${macro}_CPY(ptr,val,array_size)" \
	    "for (size_t c = 0; c < (array_size); ++c) (ptr)->$member_name[c] = val[c];"
    fi
    mutator_man $structure_type $member_type $member_name $obj ${macro}_CPY
    printf "%-47s %s\n" "#define ${macro}_AE(ptr,c,val)" \
	    "((ptr)->$member_name[c] = (val))"
    mutator_man_ae $structure_type $member_type $member_name $obj $macro
}


##########################################################################
#   Function description:
#       Generate a mutator macro and man page
#       
#   History:
#   Date        Name        Modification
#   2021-07-16  Jason Bacon Begin
##########################################################################

mutator_functions()
{
    structure_type=$1
    member=$2

if echo $member | fgrep -q ':array:'; then
    array=true
    array_size="${member##*:}"
else
    array=false
    fi
    # printf "member = $member\n"
    member_type=$(echo $member | cut -d : -f 1)
    member_name=$(echo $member | cut -d : -f 2)
    
    if echo $member_type | fgrep -q '*'; then
	local pointer=true
    else
	local pointer=false
    fi
    
    obj=${structure_type%_t}
    uc_type=$(echo $structure_type | tr '[:lower:]' '[:upper:]')
    uc_obj=${uc_type%_T}
    uc_member_name=$(echo $member_name | tr '[:lower:]' '[:upper:]')
    macro=${uc_obj}_SET_$uc_member_name
    
    # Macro
    # if [ $array = false ]; then
    #     # Scalar macro
    #     printf "%-47s %s\n" "#define $macro(ptr,val)" \
    #            "((ptr)->$member_name = (val))"
    #     mutator_man $structure_type $member_type $member_name $obj ${macro}
    # fi
    
    #if [ $array = true ] || [ $pointer = true ]; then
    #    mutator_macros_array $structure_type $member_type $member_name $obj $macro
    #fi

    # Function
    if [ $array = false ]; then
	mutator_function_scalar $structure_type $member_type $member_name $obj $macro
    fi
    if [ $array = true ] || [ $pointer = true ]; then
	mutator_function_ae $structure_type $member_type $member_name $obj $macro
	mutator_function_cpy $structure_type $member_type $member_name $obj $macro
    fi
}


##########################################################################
#   Function description:
#       Generate macros and man pages for a list of structure members
#       
#   History:
#   Date        Name        Modification
#   2021-07-16  Jason Bacon Begin
##########################################################################

gen_macros()
{
    structure_type=$1
    shift
    members="$@"
    mkdir -p Temp-man
    
    accessor_header=temp-${HEADER%.h}-accessors.h
    mutator_header=temp-${HEADER%.h}-mutators.h
    rv_header=temp-${HEADER%.h}-rvs.h
    cat << EOM > $rv_header

/* Return values for mutator functions */
#define ${RV_PREFIX}DATA_OK              0
#define ${RV_PREFIX}DATA_INVALID         -1      // Catch-all for non-specific error
#define ${RV_PREFIX}DATA_OUT_OF_RANGE    -2

EOM

    cat << EOM > $accessor_header
    
/*
 *  Generated by $0
 *
 *  Accessor macros.  Use these to access structure members from functions
 *  outside the $structure_type class.
 *
 *  These generated macros are not expected to be perfect.  Check and edit
 *  as needed before adding to your code.
 */

EOM

    cat << EOM > $mutator_header

/*
 *  Generated by $0
 *
 *  Mutator macros for setting with no sanity checking.  Use these to
 *  set structure members from functions outside the $structure_type
 *  class.  These macros perform no data validation.  Hence, they achieve
 *  maximum performance where data are guaranteed correct by other means.
 *  Use the mutator functions (same name as the macro, but lower case)
 *  for more robust code with a small performance penalty.
 *
 *  These generated macros are not expected to be perfect.  Check and edit
 *  as needed before adding to your code.
 */

EOM

    C_CODE=temp-${HEADER%.h}-mutators.c
    cat << EOM > $C_CODE
/***************************************************************************
 *  This file is automatically generated by gen-get-set.  Be sure to keep
 *  track of any manual changes.
 *
 *  These generated functions are not expected to be perfect.  Check and
 *  edit as needed before adding to your code.
 ***************************************************************************/

#include <string.h>
#include <ctype.h>
#include <xtend/string.h>   // strlcpy() on Linux
#include "$HEADER"
EOM
    
    IFS=','
    for member in $members; do
	accessor_macros $structure_type $member >> $accessor_header
	mutator_functions $structure_type $member >> $mutator_header
    done
    cat $rv_header $accessor_header $mutator_header
}


##########################################################################
#   Function description:
#       Pause until user presses return
##########################################################################

pause()
{
    local junk
    
    printf "Press return to continue..."
    read junk
}


##########################################################################
#   Main
##########################################################################

if [ $# -lt 2 ]; then
    usage
fi
HEADER=$1
LIB_FLAGS="$2"
RV_PREFIX=$3
HEADER_SUBDIR=$4    # May be empty

cat << EOM

gen-get-set is only a time-saving aid for helping with the process for
generating accessor and mutator macros.  The generated mutators especially
should not be trusted, as there may be more to setting a member value than
just assigning a new value.  E.g. strings may have an associated length that
must be updated.

Carefully check each macro and man page and edit as needed.  You may want to
replace overly compex macros with a functions.

EOM
pause

set -f  # Disable globbing so /* doesn't list files
mode=ignore
while read line; do
    case $mode in
    ignore)
	if echo $line | egrep -q 'typedef[ \t]struct'; then
	    mode=structure
	    members=''
	fi
	;;
    
    internal)
	# Skip everything to end of structure def
	# End of structure when we find "} type_t"
	if echo $line | egrep -q '\}[ \t].*_t\;'; then
	    structure_type=$(echo $line | awk -F '[ \t\;]' '{ print $2 }')
	    gen_macros $structure_type $members
	    mode=ignore
	fi
	;;
    
    structure)
	if echo $line | fgrep -q 'gen-get-set internal'; then
	    mode=internal
	elif [ "$line" != '{' ] && [ -n "$line" ] && \
	    ! echo "$line" | egrep -q '^/?\* |^/?\*$|^\*[ /]|^\*$|^//'; then
	    
	    # End of structure when we find "} type_t"
	    if echo $line | egrep -q '\}[ \t].*_t\;'; then
		# printf "members = $members\n"
		mode=ignore
		# Squeeze multiple spaces before awk
		structure_type=$(echo $line | tr -s ' ' \
		    | awk -F '[ \t;]' '{ print $2 }')
		# printf "structure_type = '$structure_type'\n"
		gen_macros $structure_type $members
		break   # One class per header
	    else
		# Remove inline comments if present
		code=$(echo $line | awk -F '[;,]' '{ print $1 }')
		
		# Remove array size if present
		no_subscripts=$(echo $code | awk -F '[' '{ print $1 }')

		# Works whether there's a type on this line or not
		member_name=$(echo $no_subscripts | awk -F '[ \t]' '{ print $NF }')
		
		# Type is everything but the var name
		nf=$(echo $no_subscripts | awk -F '[ \t]' '{ print NF }')
		if [ $nf -gt 1 ]; then
		    if echo $member_name | fgrep -q '*'; then
			# ${var%format} has problems with * in format
			base_type=$(echo $no_subscripts | awk -F '*' '{ print $1 }')
		    else
			base_type=${no_subscripts%$member_name}
		    fi
		    # Remove trailing space
		    base_type=$(echo $base_type | sed -E 's|[ \t]$||g')
		fi
		
		# member_type = base_type + *s transferred from name
		member_type="$base_type"
		member_stars=${member_name%%[A-Za-z_]*}
		if [ -n "$member_stars" ]; then
		    member_type="$member_type $member_stars"
		    member_name=${member_name##*\*}
		fi
		
		# printf "type = $member_type, name = $member_name\n"
		member="$member_type:$member_name"
		if echo $code | fgrep -q '['; then
		    array_size=$(echo $code | awk -F '[[\\]]' '{ print $2 }' | tr -d ' ')
		    member=$member:array:$array_size
		fi
		if [ -z "$members" ]; then
		    members="$member"
		else
		    members="$members,$member"
		fi
	    fi
	fi
	;;
    
    *)
	;;
    esac
done < $HEADER
pause
cproto -I/usr/local/include $C_CODE >> $mutator_header
auto-c2man $C_CODE
